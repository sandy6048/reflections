- What happens when you initialize a repository? Why do you need to do it?
This will convert the normal directory into a git repository. Once this  is done, we can find a .git hidden directory created and can be seen only when ls -a is used on that repo

- Command to add file to the git repo's "staging area"
git add

- How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area is an intermediate step before commits are made to the repository from the working directory
The value this brings in is a flexibility to define what files should be part of a specific commit and what other files from the same working directory can be part of another commit

- How to check the delta between Working area and the Staging area
Use "git diff" (with no commit ids)

"git diff <commit1> <commit 2>" -> shows delta between these commits in the repo

"git diff" -> shows the delta betwene the files in working directory and staging area

- How to check the delta between Staging area & Repository
Use "git diff --staged"

- To revert the changes made in the working directory or satging repo and not yet in the Git Repo
Use "git reset --hard"

- "git checkout master" will move the HEAD to the master (to the latest commit from the current checkout old commit)

- "git branch" to create and view branches of a git repo 

- "git branch <branch name>" will create a new branch named <branch name>

- git checkout <branch name>, will switch the branch to <branch name> from "master"

- What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would help especially to keep the master safe and do experiments on the code, but in a diferent temorary branch

master branch -> production branch where everything works perfect
development branches -> to try out new features or bug fixing and then if all is fine then merge them to the master branch to get those new features or bug fixes into the production env via master branch


- git log --graph --oneline <branch-name1> <branch-name2> will show the graph of the commit history comparision between different brabches

- How do the diagrams help you visualize the branch structure?
This helps in understanding how the commits and branches are linked. To not lose the history of any commits, its advisable to create branches before checoing out an old commit and doing new work on top of it (NOTE: if you checkout the most latest commit and work on it, then the commit hostory is not lost, because the commit will still be linke dto the head of the current branch you have been working on)

- git merge <branch-name 1> <branch-name 2> -> will merge coins branch into master branch and combine the commit into master's commit history
Eg: git merge master coins

- git show <commit ID> will show the diff between the current commit and its parent commit

- What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Automatic merging is sometimes not that good as it may downplay some important changes to certain conflict files.


