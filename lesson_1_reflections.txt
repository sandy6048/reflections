- How did viewing a diff between two versions of a file help you see the bug that was introduced?

It was very easy to pint point the differences using FC (file compare) tool.

- How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

This would help me in identifying the differences between each of these versions or between any particular revisions that I would want to compare. 

Git does not support auto saving of files or code. Manually have to be saved. The purpose of not auto saving is, for example in between the process of coding if file is saved at some illogical point in time, the code might not even compile.

- git log: Shows the history of the commits and commit metadata over a file

- git diff (commit x) (commit y): Shows diff between the commits

- What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Manual commits allows the coder to choose when to commit based on associating a logical sense to each commit ie., version of files. Auto save of changes might not always give a logical sense to each of the versions

- To quit Git log, use key "q"

- IMP: Git log shows the most recent commits at the top of the list and older ones down in the list

- Git repos is a collection of files that are tracked cohesively (together) by Git

- Cloning a repository would not only download the latest version of the files in that repo, but will get the whole version history of the files in the repo. 

- How can you use the commands git log and git diff to view the history of files?

- commit gives the snapshot of all the files at that point in the full repository

- git log shows the whole history of the repository/file, meaning all commit info. And git diff will present the delta between two commits on the same repository (can have multiple files in same repo). To quit from git log and git diff, just enter cbaracter "q" in the git bash

- Clone, copies an existing repository and places it locally on a machine

- Octopus is a "strategy" Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation

- HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit

- git checkout <commit id> -> to go a specific commit ie., set it as HEAD

- How might using version control make you more confident to make changes that could break something?

Gives the freedom to the coder, as he/she would know that there is a way to get to the working piece of code somehow. Fear of breaking it slide down, helps exploration in making code better

-